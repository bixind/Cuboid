apply plugin: 'com.android.model.application'

// Root of 3rd party lib(s): location could be anywhere on the host system
def lib_distribution_root = '../distribution'
model {
    repositories {
        libs(PrebuiltLibraries) {
            // Configure one pre-built lib: shared
            essentia {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/essentia/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/essentia/lib/${targetPlatform.getName()}/libessentia.so")
                }
            }
            // Configure another pre-built lib: shared;[change to static after Studio supports]
            // static lib generation. USING static lib is supported NOW, for that case,
            // simple change:
            //  SharedLibaryBinary --> StaticLibraryBinary
            //  sharedLibraryFile  --> staticLibraryFile
            //  *.so --> *.a
        }
    }
    android {
        compileSdkVersion = 24
        buildToolsVersion = '24.0.0'

        defaultConfig {
            applicationId = 'com.pcom.nextpl'
            minSdkVersion.apiLevel = 18
            targetSdkVersion.apiLevel = 18
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 18
            moduleName = 'nextpl'
            toolchain = 'clang'
            stl = 'gnustl_static'
            cppFlags.addAll(['-std=c++11', '-fexceptions', '-frtti'])
            ldLibs.addAll(['android', 'log'])
            // build a default combined apk including all ABIs.
             abiFilters.addAll(['armeabi-v7a'])
        }
        sources {
            main {
                jni {
                    dependencies {
                        library 'essentia' linkage 'shared'
                        // if gperf were *.a, change shared --> static
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "${lib_distribution_root}/essentia/lib"
                    }
                }
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-android.txt'))
            }
        }
    }
}

dependencies {
    println rootProject.getName()
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:recyclerview-v7:24.0.0'
    compile 'com.android.support:appcompat-v7:24.0.0'
}

//  Unnecessary dependency management:
//  Make sure the libs are available when begin compiling application project
//  This could be ignored because in real scenario, the pre-built libs are
//  already given to us before creating application.

